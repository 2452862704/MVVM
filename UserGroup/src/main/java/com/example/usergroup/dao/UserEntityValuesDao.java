package com.example.usergroup.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.usergroup.data.entity.UserEntityValues;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ENTITY_VALUES".
*/
public class UserEntityValuesDao extends AbstractDao<UserEntityValues, Long> {

    public static final String TABLENAME = "USER_ENTITY_VALUES";

    /**
     * Properties of entity UserEntityValues.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
        public final static Property User_pwd = new Property(2, String.class, "user_pwd", false, "USER_PWD");
        public final static Property User_mobile = new Property(3, String.class, "user_mobile", false, "USER_MOBILE");
        public final static Property User_icon = new Property(4, String.class, "user_icon", false, "USER_ICON");
        public final static Property User_real_name = new Property(5, String.class, "user_real_name", false, "USER_REAL_NAME");
        public final static Property User_identity_card = new Property(6, String.class, "user_identity_card", false, "USER_IDENTITY_CARD");
        public final static Property User_nick_name = new Property(7, String.class, "user_nick_name", false, "USER_NICK_NAME");
        public final static Property User_gender = new Property(8, String.class, "user_gender", false, "USER_GENDER");
        public final static Property User_birthday = new Property(9, String.class, "user_birthday", false, "USER_BIRTHDAY");
        public final static Property User_address = new Property(10, String.class, "user_address", false, "USER_ADDRESS");
        public final static Property User_sign = new Property(11, String.class, "user_sign", false, "USER_SIGN");
        public final static Property Push_id = new Property(12, String.class, "push_id", false, "PUSH_ID");
    }


    public UserEntityValuesDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityValuesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY_VALUES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: user_name
                "\"USER_PWD\" TEXT," + // 2: user_pwd
                "\"USER_MOBILE\" TEXT," + // 3: user_mobile
                "\"USER_ICON\" TEXT," + // 4: user_icon
                "\"USER_REAL_NAME\" TEXT," + // 5: user_real_name
                "\"USER_IDENTITY_CARD\" TEXT," + // 6: user_identity_card
                "\"USER_NICK_NAME\" TEXT," + // 7: user_nick_name
                "\"USER_GENDER\" TEXT," + // 8: user_gender
                "\"USER_BIRTHDAY\" TEXT," + // 9: user_birthday
                "\"USER_ADDRESS\" TEXT," + // 10: user_address
                "\"USER_SIGN\" TEXT," + // 11: user_sign
                "\"PUSH_ID\" TEXT);"); // 12: push_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY_VALUES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntityValues entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
 
        String user_pwd = entity.getUser_pwd();
        if (user_pwd != null) {
            stmt.bindString(3, user_pwd);
        }
 
        String user_mobile = entity.getUser_mobile();
        if (user_mobile != null) {
            stmt.bindString(4, user_mobile);
        }
 
        String user_icon = entity.getUser_icon();
        if (user_icon != null) {
            stmt.bindString(5, user_icon);
        }
 
        String user_real_name = entity.getUser_real_name();
        if (user_real_name != null) {
            stmt.bindString(6, user_real_name);
        }
 
        String user_identity_card = entity.getUser_identity_card();
        if (user_identity_card != null) {
            stmt.bindString(7, user_identity_card);
        }
 
        String user_nick_name = entity.getUser_nick_name();
        if (user_nick_name != null) {
            stmt.bindString(8, user_nick_name);
        }
 
        String user_gender = entity.getUser_gender();
        if (user_gender != null) {
            stmt.bindString(9, user_gender);
        }
 
        String user_birthday = entity.getUser_birthday();
        if (user_birthday != null) {
            stmt.bindString(10, user_birthday);
        }
 
        String user_address = entity.getUser_address();
        if (user_address != null) {
            stmt.bindString(11, user_address);
        }
 
        String user_sign = entity.getUser_sign();
        if (user_sign != null) {
            stmt.bindString(12, user_sign);
        }
 
        String push_id = entity.getPush_id();
        if (push_id != null) {
            stmt.bindString(13, push_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntityValues entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
 
        String user_pwd = entity.getUser_pwd();
        if (user_pwd != null) {
            stmt.bindString(3, user_pwd);
        }
 
        String user_mobile = entity.getUser_mobile();
        if (user_mobile != null) {
            stmt.bindString(4, user_mobile);
        }
 
        String user_icon = entity.getUser_icon();
        if (user_icon != null) {
            stmt.bindString(5, user_icon);
        }
 
        String user_real_name = entity.getUser_real_name();
        if (user_real_name != null) {
            stmt.bindString(6, user_real_name);
        }
 
        String user_identity_card = entity.getUser_identity_card();
        if (user_identity_card != null) {
            stmt.bindString(7, user_identity_card);
        }
 
        String user_nick_name = entity.getUser_nick_name();
        if (user_nick_name != null) {
            stmt.bindString(8, user_nick_name);
        }
 
        String user_gender = entity.getUser_gender();
        if (user_gender != null) {
            stmt.bindString(9, user_gender);
        }
 
        String user_birthday = entity.getUser_birthday();
        if (user_birthday != null) {
            stmt.bindString(10, user_birthday);
        }
 
        String user_address = entity.getUser_address();
        if (user_address != null) {
            stmt.bindString(11, user_address);
        }
 
        String user_sign = entity.getUser_sign();
        if (user_sign != null) {
            stmt.bindString(12, user_sign);
        }
 
        String push_id = entity.getPush_id();
        if (push_id != null) {
            stmt.bindString(13, push_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserEntityValues readEntity(Cursor cursor, int offset) {
        UserEntityValues entity = new UserEntityValues( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_pwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_mobile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_icon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_real_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_identity_card
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_nick_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // user_gender
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // user_birthday
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // user_address
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // user_sign
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // push_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntityValues entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_pwd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_mobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_icon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_real_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_identity_card(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_nick_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUser_gender(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUser_birthday(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUser_address(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUser_sign(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPush_id(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserEntityValues entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserEntityValues entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserEntityValues entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
